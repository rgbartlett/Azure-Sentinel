// Potential phishing emails based on URL and anomalous sender
// Highlights potential phishing emails based on anomalous sender, multiple recipients and URL patterns used in current phishing emails. Uses different detection for massemails based on count of SenderFromAddress and Subject rather than NetworkMesageId
// Define phishing links here based on current threat information
let PhishingLinkHost = dynamic(["t.ly","r20.rs6.net", "ct.sendgrid.net", "clicktime.symantec.com", "t.indeed.com", "slickdeals.net", "www.linkedin.com/slink", "my.sharepoint.com", "bing.com/ck/a", "google.com/amp/s/", "www.dropbox.com/l/scl/", "indd.adobe.com", "www.canva.com/design/", "000webhostapp.com/", "firebaseapp.com/", "app.box.com/notes", "webcindario.com/", ".pl/", ".ru/"]);
// Define minimum recipients, 5 was based on previous phishing emails
let MinRecipients = 5;
// Build list of senders who have previously sent emails with links
let LinkSenders = (EmailEvents
    | where UrlCount > 0 and EmailDirection == "Inbound"
    | where TimeGenerated between (ago(30d) .. ago(4h)) and DeliveryAction == "Delivered"
    | distinct SenderFromAddress);
// Build list of mass email senders based on count of sender address and first 64 characters of subject
let MassEmailFromAddress = (EmailEvents
    | where TimeGenerated > ago(4h) and EmailDirection == "Inbound"
    | extend SubjectAbbrev = substring(Subject, 0, 64)
    | summarize MessageCount = count() by SenderFromAddress, SubjectAbbrev
    | where MessageCount >= 5
    | distinct SenderFromAddress, SubjectAbbrev);
// Build list of mass email subjects based on count of sender address and subject
let MassEmailSubject = (EmailEvents
    | where TimeGenerated > ago(4h) and EmailDirection == "Inbound"
    | extend SubjectAbbrev = substring(Subject, 0, 64)
    | summarize MessageCount = count() by SenderFromAddress, SubjectAbbrev
    | where MessageCount >= 5
    | distinct SubjectAbbrev);
let FoundEmails = (EmailEvents
    | where TimeGenerated > ago(4h) and EmailDirection == "Inbound" and UrlCount > 0
    | join EmailUrlInfo on NetworkMessageId
    | extend SubjectAbbrev = substring(Subject, 0, 64)
    | where Url has_any (PhishingLinkHost)
        and SenderFromAddress !in~ (LinkSenders)
        and SenderFromAddress in~ (MassEmailFromAddress)
        and SubjectAbbrev in (MassEmailSubject)
// Previously these were in an AllowedLinked variable but for some reason for this rule only this didn't work, so currently added as explicit lines, this needs fixing
//      and Url !has "insert allowed URL here"
//      and Url !has "insert allowed URL here"
    | distinct NetworkMessageId);
let M365SURL = "https://security.microsoft.com/emailentity?f=summary";
EmailEvents
| where NetworkMessageId in~ (FoundEmails)
| extend LinkToEmail = strcat(M365SURL, "&startTime=", TimeGenerated, "&endTime=", TimeGenerated, "&id=", NetworkMessageId, "&recipient=", RecipientEmailAddress, "&tid=06976414-1a5a-4334-ac04-e7ab43442d36")
| distinct
    TimeGenerated,
    RecipientEmailAddress,
    SenderFromAddress,
    Subject,
    LinkToEmail,
    NetworkMessageId
